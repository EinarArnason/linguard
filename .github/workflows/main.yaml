name: main

on:
  push:
    branches:
      - main
    paths:
      - "**.py"
      - "**.js"
      - "**.yml"
      - "**.yaml"
      - "**.sh"
      - "poetry.lock"
      - "pyproject.toml"

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        python-version: [3.7, 3.8, 3.9]
        os: [ ubuntu-20.04 ]
    steps:
      - name: Check out repository
        uses: actions/checkout@v2

      - name: Set permissions
        run: |
          chmod +x linguard/core/tools/*

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Upgrade pip
        run: |
          pip install --upgrade pip

      - name: Set up virtual environment using poetry
        run: |
          wget https://raw.githubusercontent.com/python-poetry/poetry/master/install-poetry.py
          python3 install-poetry.py
          poetry config virtualenvs.create false
          poetry install --no-interaction

      - name: Install linux dependencies
        run: |
          sudo apt-get -qq install wireguard iptables

      - name: Run tests
        run: |
          export github_action_hook=True
          export skip_sample_server=True
          poetry run coverage run -m pytest && poetry run coverage xml

      - name: Upload coverage report to Codecov
        uses: codecov/codecov-action@v1
        if: always()
        with:
          files: coverage.xml

      - name: Build release
        run: |
          chmod +x build.sh
          ./build.sh

      - name: Install release
        run: |
          cd dist
          tar -xf *.tar.gz
          chmod +x install.sh
          sudo ./install.sh

      - name: Briefly test uwgsi (can't use service here)
        run: |
          sudo -u linguard /usr/bin/uwsgi --yaml /etc/linguard/config/uwsgi.yaml &
          sleep 2s
          sudo pkill -f uwsgi
  release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Get version
        id: get_version
        run: |
          - echo "::set-output name=version::$(cat pyproject.toml | grep version | xargs | cut -d " " -f 3)
      - name: Build artifacts
        run: |
          - ./build.sh
      - uses: ncipollo/release-action@v1
        with:
          name: ${{ steps.get_version.outputs.version }}
          tag: "v${{ steps.get_version.outputs.version }}"
          commit: "main"
          artifacts: "dist/*.tar.gz"
          bodyFile: "changelog.md"
          discussionCategory: "Announcements"
          token: ${{ secrets.GITHUB_TOKEN }}
