# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: dev

on:
  push:
    branches-ignore:
      - main
    paths:
      - "**.py"
      - "**.js"
      - "**.yml"
      - "**.yaml"
      - "**.sh"
      - "requirements.txt"

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        python-version: [3.7, 3.8, 3.9]
        os: [ubuntu-20.04, ubuntu-18.04]
    steps:
      - name: Check out repository
        uses: actions/checkout@v2

      - name: Set permissions
        run: |
          chmod +x core/tools/*

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Set up virtual environment
        run: |
          sudo apt-get -qq install python3-venv
          python3 -m venv ./venv

      - name: Upgrade pip
        run: |
          source ./venv/bin/activate
          pip install --upgrade pip

      - name: Install python requirements
        run: |
          source ./venv/bin/activate
          pip install -r requirements.txt

      #- name: Run linter
      #  run: |
      #    source ./venv/bin/activate
      #    pip install flake8
      #    flake8 .
      #  continue-on-error: true

      - name: Install linux dependencies
        run: |
          sudo apt-get -qq install wireguard iptables

      - name: Run tests
        run: |
          source ./venv/bin/activate
          pip install pytest pytest-cov
          export github_action_hook=True
          sudo -E ./venv/bin/python -m pytest -s --cov-report xml:coverage.xml --cov

      - name: Upload coverage report to Codecov
        uses: codecov/codecov-action@v1
        if: always()
        with:
          files: coverage.xml
  deploy:
    needs: test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-20.04, ubuntu-18.04 ]
    steps:
      - name: Extract branch name
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        id: extract_branch

      - name: Escape branch name
        run: echo "##[set-output name=branch;]$(echo "${{ steps.extract_branch.outputs.branch }}" | sed 's/#/\%23/g;')"
        id: escaped_extract_branch

      - name: Download specific branch's installation script and run it
        run: |
          wget -q "https://raw.githubusercontent.com/joseantmazonsb/linguard/${{ steps.escaped_extract_branch.outputs.branch }}/scripts/install.sh" .
          sudo chmod +x install.sh
          sudo ./scripts/install.sh /var/www/linguard "${{ steps.extract_branch.outputs.branch }}"

      - name: Briefly test using uWSGI
        run: |
          sudo -u linguard uwsgi --yaml /var/www/linguard/config/uwsgi.sample.yaml &
          sleep 2s
          sudo pkill -f uwsgi